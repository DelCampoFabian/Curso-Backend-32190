//Callback : Funciones pasadas como parametro
// La idea es que la funcion "contenedora" ejecute la funcion que es pasada por parametro
// en este ejemplo "saludar()" vendria a ser la funcion contenedora que va a ejecutar a "saludo()"

//Funcion para pasar como parametro (Callback)
/* let saludo = () => {
    console.log("Que onda")
} */

//Función que llama a otra función
/* function saludar (paramFuncion) {
    // ↓ ↓ ↓    ejecutamos la función 
    paramFuncion()
}  */

//saludar(saludo)

// Promesas: encapsula una operacióm. Cuando se completa permite definir acciones segun el tipo de resultado
/* Estados de una Promesa: 
Pendiente: La promesa no fue resuelta.
resolve: La promesa fue resualta con exito - su resultado sera manejado por el callback asignado mediante el metodo .then()
reject: La promesa fue resuelta con un error - su resultado sera manejado por el callback asignado mediante el metodo .catch()

*/

// Sincrono ejemplo

function a (){
    console.log(1)
    b()//aca se "pausa" la ejecucion a y empieza a ejecutar la función b 
    console.log(2)
    
}
function b (){
    console.log(3)
    c()//aca se "pausa" la ejecucion b y empieza a ejecutar la función c
    console.log(4);
    
}
function c () {
    console.log(5) //  ↑ ↑ ↑  Se termina de ejecutar C y B retoma su ejecución  
}
a()

/* En todo momento se estan ejecutando las instrucciones de una sola de las funciones a la vez. Osea, debe finalizar una de las funciones antes de pasar a la otra */

//fs: fyle system. Es un modulo nativo de nodejs. En nodeJs se pueden manipular archivos a traves del "fs"
//Con el require podemos acceder a funciones y clases exportados de otros programas
//fs.readFile() Lee un archivo

//  operaciones sincronicas 
//  readFileSync: lectura de un archivo en forma sincrónica
//  writeFileSync: escritura de un archivo en forma sincrónica. Si ya hay algo escrito en el archivo, borra todo y empieza a escribir desde 0
//  appendFileSync: actualización de un archivo en forma sincrónica. Si ya hay algo escrito en el archivo, empieza a escribir desde el final 
//  unlinkSync: borrado de un archivo en forma sincrónica
//  mkdirSync: creación de una carpeta

//fs.writeFileSync("rutadelarchivo", "Texto a sobreescribir") Si la ruta es valida pero el archivo no existe, se creara un nuevo archivo con los cambios

// operaciones asincronicas

//  readFile: lectura de un archivo en forma sincrónica
//  writeFile: escritura de un archivo en forma sincrónica. Si ya hay algo escrito en el archivo, borra todo y empieza a escribir desde 0
//  appendFile: actualización de un archivo en forma sincrónica. Si ya hay algo escrito en el archivo, empieza a escribir desde el final 
//  unlink: borrado de un archivo en forma sincrónica
//  mkdir: creación de una carpeta

//fs con callbacks : reciben un nuevo ultimo parametro: un callback


nodeJs: Entorno de ejecucion de Js. Incluye todo lo que se necesita para ejecutar un programa escrito en JS por fuera del navegador

// Modulos nativos en Node Js
Un módulo es un conjunto de funciones y objetos de JavaScript que las aplicaciones externas pueden usar.

// Administradores de paquetes 
Los Package Managers sirven para no tener que descargar, instalar y mantener las dependencias(modulo, paquete, librerias, etc.(tienen bastantes sinonimos)) de un proyecto a mano. 

// NPM es el administrador de paquetes propio de Node
Las dependencias pueden instalarse en forma
global : Todos los proyectos de NodeJS que hay en nuestra computadora
local : Proyecto en el cual estoy parado (mayormente usada)
Si instalamos una dependencia en forma global, todos nuestros programas desarrollados en NodeJS contarán con esa librería, y con la versión que haya sido instalada.
En cambio, si instalamos en forma local, podremos elegir exactamente qué librería y con qué versión contará cada proyecto que desarrollemos.

//Package.JSON
Es un archivo de configuración en formato JSON
Es toda la metadata(información) del proyecto 
Podemos crearlo mediante la instrucción: npm init // npm init -y lo crea de manera default
EJ util: tenemos un proyecto de transacciones de pago. Nuestros datos serian las transacciones de los pagos y nuestra metadata seria es COMO SE CONFIGURO EL PROYECTO
Podemos especificar en este archivo la lista de dependencias, que son las librerías que usa el proyecto para funcionar o para realizar distintos tipos de testing.
Siempre que hayamos especificado nuestras dependencias en el archivo de configuración (package.json) podremos actualizar y mantener de forma fácil y segura las dependencias del proyecto con el comando npm install


//Versionado 
EJEMPLO: 3.0.7
Major Release: El primer número corresponde a actualizaciones grandes/significativas que incluyen muchas nuevas características, o que cambian de manera significativa el funcionamiento de las existentes. 
Minor Release: El segundo número corresponde a actualizaciones pequeñas que agregan pocas cosas nuevas o actualizan algún detalle del funcionamiento de la librería.
Patches: El tercer número corresponde a arreglos o parches que corrigen defectos en las funcionalidades de la librería. 

//Manejo avanzado de Versionado
Cada una de las versiones de las dependencias está precedida por un símbolo ( ~ ^ * ) que indica la forma en la que deseamos que se actualice ese módulo cada vez que ejecutemos npm install

//Solo Patches
Si escribimos en nuestro package.json: → ~ ← ~0.13.0 se actualizan Patches


//Patches y actualizaciones menores 

Si escribimos en nuestro package.json:  → ^ ← ^0.13.0 se actualizan Patches y actualizaciones menores 


//Todas las actualizaciones

Si escribimos en nuestro package.json: *0.13.0  Se actualiza todo

//Nodemon
Nodemon nos ayuda en el desarrollo relanzando la ejecución de Node.js en el caso de que algún archivo de nuestro proyecto cambie.

diferencia entre servidor web y nuestro progamas de vsc 
los de vsc empiezan y terminan
y los servidores web lo iniciamos y no tiene fin  a noser que nosotros lo terminamos


//HTTP : modulo nativo de NodeJS

Trabaja con el protocolo HTTP, que es el que se utiliza en Internet para transferir datos en la Web.
El protocolo se basa en el esquema PETICION - RESPUESTA.
Existen CLIENTES que realizan solicitudes de transmision de datos, y un SERVIDOR que atienden esas peticiones
Nos va a servir para crear un servidor HTTP que acepte solicitudes desde un cliente web.
Llamado: require ('http').

//  const htttp = require ("http")  //



//  const server = http.createServer((peticion, respuesta) => {
   respuesta.end('Hola mundo')
})  //

Una de las tareas del módulo HTTP es la de crear un servidor. 
La función callback que enviamos a createServer() recibe dos parámetros que son la petición y la respuesta. 
La petición contiene datos de la petición realizada.
La respuesta la usaremos para enviarle datos al cliente que hizo la petición. 
De modo que "respuesta.end()" sirve para terminar la petición y enviarle datos al cliente.


//  const connectedServer = server.listen(8080, () => {
    console.log(`Servidor Http escuchando en el puerto ${connectedServer.address().port}`)
})  //


Con esto le decimos al servidor que escuche en el puerto(convencion 8080. Puede ser cualquiera)
"listen()" recibe también una función callback que simplemente, en esa función callback indico que estoy listo y escuchando en el puerto configurado.
Listen, además, devuelve un objeto que contiene los datos del servidor conectado.

//express.js 
Express es un framework web minimalista, con posibilidad de ser utilizado tanto para aplicaciones/páginas web como para aplicaciones de servicios.

Instalación desde la consola:
npm install express

Express nos permite definir, para cada tipo de petición HTTP
que llegue a una determinada URL, qué acciones debe tomar, mediante la definición de un callback para cada caso que consideremos necesario incluir en nuestra API.


const express = require ("express")

El objeto obtenido luego del import es una función. Al ejecutarla, nos devolverá la aplicación servidor
const app = express()

que configuraremos posteriormente con los detalles de nuestra aplicación. 

//Conexión del servidor
Debemos indicar en qué puerto de nuestra computadora queremos que nuestra aplicación comience a escuchar peticiones. Este puerto será de uso exclusivo de nuestro servidor, y no podrá ser compartido con otras aplicaciones.

const PORT = 8080

const server = app.listen(PORT, () => {
   console.log(`Servidor http escuchando en el puerto ${server.address().port}`)
})

configuración tipo Get
Cuando queremos obtener algún tipo de información del servidor utilizamos peticiones de tipo GET. Entonces, configuraremos en nuestro servidor un manejador para estas peticiones. Como respuesta, devolveremos el resultado deseado en forma de objeto.

//Que es una API

Es un conjunto de funciones y procedimientos que describen la manera en que un sistema puede comunicarse con otros.
Permite la colaboración e interoperabilidad entre los sistemas desarrollados en distintas plataformas e incluso en distintos lenguajes.


//REST = REpresentatonial State Transfer --> transferencia de estado representacional
representacion = modelo o estructura con la que representamos algo
estado = datos que contiene ese modelo o estructura
Transferir un Estado de Representación implica el envío de datos (con una determinada estructura) entre dos partes.
Los dos formatos más utilizados para este tipo de transferencias de datos son XML y JSON.

//API REST 
- Es un tipo de API que no dispone interfaz grafica
- Se utiliza exclusivamente para comunicación entre sistemas, mediante el protocolo HTTP (peticion-respuesta)
- Características:

* Arquitectura cliente - servidor sin estado 
Cada mensaje HTTP tiene toda la información necesaria para comprender la petición. 
Como resultado, ni el cliente ni el servidor necesitan recordar ningún estado de las comunicaciones entre mensajes. 
Esta restricción mantiene al cliente y al servidor débilmente acoplados: el cliente no necesita conocer los detalles de implementación del servidor y el servidor se “despreocupa” de cómo son usados los datos que envía al cliente.

* Cacheable 

Debe admitir un sistema de almacenamiento en Cache
La infraestructura de red debe soportar una cache de varios niveles
Este almacenamiento evita repetir varias conexiones entre el cliente y el servidor 
ej: estoy en mi perfil de fb y estoy viendo mi info. Si recargo voy a hacer la peticion al servidor para que me traiga la info de mi perfil. Ahora si yo vuelvo a hacer esa peticion, cache ya va a tener almacenada esta busqueda de mi perfil y me lo va a devolver si tener que ir a los servidores a buscar la info de mi perfil.


* Operaciones comunes

Todos los recursos detrás de nuestra API deben poder ser consumidos mediante peticiones HTTP.
Con frecuencia estas operaciones se equiparan a las operaciones CRUD en bases de datos (en inglés: Create, Read, Update, Delete, en español: Alta, Lectura, Modificación, y Baja). 
Al tratarse de peticiones HTTP, éstas deberán devolver con sus respuestas los correspondientes códigos de estado, informando el resultado de las mismas. 


* Interfaz uniforme

En un sistema REST, cada acción (más correctamente, cada recurso) debe contar con una URI (Uniform Resource Identifier), un identificador único. 
Ésta nos facilita el acceso a la información, tanto para consultarla, como para modificarla o eliminarla, pero también para compartir su ubicación exacta a terceros.
URL basicamente

* Utilizacion de hipermedios

Cada vez que se hace una petición al servidor y este devuelve una respuesta, parte de la información devuelta pueden ser también recursos de navegación asociada a otros recursos del cliente.
Como resultado de esto, es posible navegar de un recurso REST a muchos otros, simplemente siguiendo enlaces sin requerir el uso de registros u otra infraestructura adicional. 


// Principios RESTful API

Una aplicación RESTful requiere un enfoque de diseño distinto a la forma típica de pensar en un sistema: lo contrario a RPC
RPC (llamadas a procedimientos remotos) basa su funcionamiento en las operaciones que puede realizar el sistema (acciones, usualmente verbos). Ej: getUsuario()
En REST, por el contrario, el énfasis se pone en los recursos (usualmente sustantivos), especialmente en los nombres que se le asigna a cada tipo de recurso. Ej. Usuarios.
Cada funcionalidad relacionada con este recurso tendría sus propios identificadores y peticiones en HTTP.

// Express: atencion de peticiones

Para definir cómo se debe manejar cada tipo de petición usaremos los métodos nombrados de acuerdo al tipo de petición que manejan: get(), post(), delete(), y put().
primer argumento ("/Ruta/"). Solo manejarán peticiones que coincidan en ruta y en tipo. El segundo argumento será el callback ( req, res ) => { } con que se manejará la petición.

Las peticiones pueden tener detalles sobre la búsqueda que se quiere realizar.

Estos parámetros se agregan al final de la URL, mediante un signo de interrogación ‘?’ y enumerando pares ‘clave=valor’ separados por un ampersand ‘&’ si hay más de uno. 
ej: /miruta?clave=valor&segundaClave=valor.
Al recibirlos, los mismos se encontrarán en el objeto ‘query’ dentro del objeto petición (req).

Ejemplo de petición GET con identificador 

En caso de que se quiera acceder a un recurso en particular ya conocido, es necesario enviar un identificador unívoco en la URL.

Para enviar este tipo de parámetros, el mismo se escribirá luego del nombre del recurso (en la URL), separado por una barra. 
Por ejemplo: http: //miservidor.com/api/mensajes/1 

Para acceder al campo identificador desde el lado del servidor, Express utiliza una sintaxis //miservidor.com/api/mensajes/ --> :identificador , al especificar la ruta escuchada. Luego, para acceder al valor del mismo, se hará a través del campo ‘params’ del objeto petición (req) recibido en el callback.

//petición POST
Algunas peticiones requieren el envío de algún dato desde el cliente hacia el servidor. Por ejemplo, al crear un nuevo registro. Este es el caso de la petición POST. Para acceder al cuerpo del mensaje, incluído en la petición, lo haremos a través del campo ‘body’ del objeto petición recibido en el callback. En este caso, estamos devolviendo como respuesta el mismo registro que se envió en la petición.
const mensaje = req.body


// Ruteo en express 

La clase Router se usa para crear un nuevo objeto de enrutador, que es una instancia aislada de middleware y rutas. Se utiliza cuando se desea crear un nuevo objeto de enrutador para manejar solicitudes.

El Router de express nos permite crear múltiples "mini aplicaciones" para que se pueda asignar un espacio de nombre al api público, autenticación y otras rutas en sistemas de enrutamiento separados.

// Servicio de archivos estaticos en Express

Para el servicio de archivos estáticos se utiliza la función de middleware incorporada express.static.
Esta función recibe como parámetro el nombre del directorio que contiene los activos estáticos.
app.use(express.static('public'));



